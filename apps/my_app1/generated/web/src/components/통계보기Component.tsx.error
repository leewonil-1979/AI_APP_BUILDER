// AR 손씻기 습관 유도 - 통계보기 컴포넌트 (Tier 4 Phase 1: 고급 분석)
import {
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  Chip,
  LinearProgress,
  Stack,
  Alert,
  Avatar,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  ButtonGroup,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
} from "@mui/material";
import { useState, useMemo } from "react";
import { use기록추가 } from "../store/store";

// 시간 범위 타입 정의
type TimeRange = "일주일" | "한달" | "3개월" | "전체";
type ChartType = "일별" | "시간대별" | "품질별" | "위치별";

// 고급 통계 계산 함수들
const calculateAdvancedStats = (records: any[], timeRange: TimeRange) => {
  const now = new Date();
  const filterDate = new Date();

  // 시간 범위별 필터링
  switch (timeRange) {
    case "일주일":
      filterDate.setDate(now.getDate() - 7);
      break;
    case "한달":
      filterDate.setMonth(now.getMonth() - 1);
      break;
    case "3개월":
      filterDate.setMonth(now.getMonth() - 3);
      break;
    case "전체":
      filterDate.setFullYear(2000);
      break;
  }

  const filteredRecords = records.filter((record) => new Date(record.timestamp) >= filterDate);

  // 기본 통계
  const totalWashes = filteredRecords.length;
  const avgDuration =
    totalWashes > 0
      ? filteredRecords.reduce((sum, r) => sum + (r.duration || 20), 0) / totalWashes
      : 0;

  // 품질 분포
  const qualityDistribution = {
    excellent: filteredRecords.filter((r) => r.quality === "excellent").length,
    good: filteredRecords.filter((r) => r.quality === "good").length,
    poor: filteredRecords.filter((r) => r.quality === "poor").length,
  };

  // 위치별 통계
  const locationStats = filteredRecords.reduce((acc, record) => {
    const location = record.location || "미정";
    acc[location] = (acc[location] || 0) + 1;
    return acc;
  }, {});

  // 시간대별 분석 (24시간 기준)
  const hourlyStats = Array.from({ length: 24 }, (_, i) => ({ hour: i, count: 0 }));
  filteredRecords.forEach((record) => {
    const hour = new Date(record.timestamp).getHours();
    hourlyStats[hour].count++;
  });

  // 일별 분석 (최근 30일)
  const dailyStats = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - i);
    const dateStr = date.toDateString();
    const count = filteredRecords.filter(
      (r) => new Date(r.timestamp).toDateString() === dateStr,
    ).length;
    return { date: dateStr, count, day: i };
  }).reverse();

  // 연속 기록 계산
  let currentStreak = 0;
  let longestStreak = 0;
  let tempStreak = 0;

  for (let i = 0; i < 30; i++) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    const hasRecord = filteredRecords.some(
      (r) => new Date(r.timestamp).toDateString() === date.toDateString(),
    );

    if (hasRecord) {
      tempStreak++;
      if (i === 0) currentStreak = tempStreak;
    } else {
      longestStreak = Math.max(longestStreak, tempStreak);
      tempStreak = 0;
    }
  }
  longestStreak = Math.max(longestStreak, tempStreak);

  // AR 사용률
  const arUsage = filteredRecords.filter((r) => r.arUsed).length;
  const arUsageRate = totalWashes > 0 ? (arUsage / totalWashes) * 100 : 0;

  // 완료도 분석 (6단계 기준)
  const avgCompletionRate =
    filteredRecords.length > 0
      ? (filteredRecords.reduce((sum, r) => sum + (r.completedSteps?.length || 0) / 6, 0) /
          filteredRecords.length) *
        100
      : 0;

  return {
    totalWashes,
    avgDuration,
    qualityDistribution,
    locationStats,
    hourlyStats,
    dailyStats,
    currentStreak,
    longestStreak,
    arUsageRate,
    avgCompletionRate,
    filteredRecords,
  };
};

// 품질 색상 매핑
const getQualityColor = (quality: string) => {
  switch (quality) {
    case "excellent":
      return { bg: "#4caf50", text: "완벽" };
    case "good":
      return { bg: "#ff9800", text: "양호" };
    case "poor":
      return { bg: "#f44336", text: "개선필요" };
    default:
      return { bg: "#757575", text: "미정" };
  }
};

export const 통계보기Component = () => {
  const { 기록추가Data } = use기록추가();

  // 상태 관리
  const [timeRange, setTimeRange] = useState<TimeRange>("일주일");
  const [chartType, setChartType] = useState<ChartType>("일별");
  const [showDetails, setShowDetails] = useState(false);

  // 고급 통계 계산
  const stats = useMemo(
    () => calculateAdvancedStats(기록추가Data, timeRange),
    [기록추가Data, timeRange],
  );

  // 성취 레벨 계산
  const achievementLevel = useMemo(() => {
    const { totalWashes, currentStreak, avgCompletionRate } = stats;

    if (totalWashes >= 100 && currentStreak >= 30 && avgCompletionRate >= 90) {
      return { level: "마스터", icon: "🏆", color: "#ffd700", description: "손씻기 마스터!" };
    } else if (totalWashes >= 50 && currentStreak >= 14 && avgCompletionRate >= 80) {
      return {
        level: "전문가",
        icon: "⭐",
        color: "#ff6b35",
        description: "훌륭한 습관을 유지하고 있어요",
      };
    } else if (totalWashes >= 20 && currentStreak >= 7 && avgCompletionRate >= 70) {
      return {
        level: "숙련자",
        icon: "🎯",
        color: "#4ecdc4",
        description: "좋은 습관이 자리잡고 있어요",
      };
    } else if (totalWashes >= 5 && avgCompletionRate >= 60) {
      return { level: "초보자", icon: "🌱", color: "#95e1d3", description: "좋은 시작이에요!" };
    }
    return { level: "시작", icon: "👶", color: "#f8f9fa", description: "첫 걸음을 시작해보세요" };
  }, [stats]);

  // 개선 제안 생성
  const improvementSuggestions = useMemo(() => {
    const suggestions = [];
    const { qualityDistribution, avgDuration, arUsageRate, currentStreak, locationStats } = stats;

    if (qualityDistribution.poor > qualityDistribution.excellent) {
      suggestions.push({
        type: "quality",
        icon: "🎯",
        title: "손씻기 품질 개선",
        description: "더 꼼꼼하게 6단계를 모두 완료해보세요",
        color: "#f44336",
      });
    }

    if (avgDuration < 20) {
      suggestions.push({
        type: "duration",
        icon: "⏱️",
        title: "손씻기 시간 늘리기",
        description: "WHO 권장 20초 이상 손씻기를 실천해보세요",
        color: "#ff9800",
      });
    }

    if (arUsageRate < 50) {
      suggestions.push({
        type: "ar",
        icon: "📱",
        title: "AR 기능 활용",
        description: "AR 가이드로 더 정확한 손씻기를 연습해보세요",
        color: "#9c27b0",
      });
    }

    if (currentStreak < 3) {
      suggestions.push({
        type: "consistency",
        icon: "📅",
        title: "꾸준함 만들기",
        description: "매일 꾸준히 기록해서 습관을 만들어보세요",
        color: "#2196f3",
      });
    }

    const homeWashes = locationStats["집"] || 0;
    const totalWashes = Object.values(locationStats).reduce(
      (sum: number, count) => sum + (count as number),
      0,
    );
    if (homeWashes < totalWashes * 0.3 && totalWashes > 0) {
      suggestions.push({
        type: "location",
        icon: "🏠",
        title: "집에서도 실천하기",
        description: "집에서의 손씻기도 꾸준히 기록해보세요",
        color: "#4caf50",
      });
    }

    return suggestions.slice(0, 3); // 최대 3개 제안
  }, [stats]);

  return (
    <Box sx={{ p: 3 }}>
      <Stack spacing={3}>
        {/* 헤더 및 필터 */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            flexWrap: "wrap",
            gap: 2,
          }}
        >
          <Box>
            <Typography variant="h4" component="h1" gutterBottom>
              📊 고급 통계 분석
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              AI 기반 상세 분석 및 개인화된 인사이트
            </Typography>
          </Box>

          <Stack direction="row" spacing={2}>
            <FormControl size="small" sx={{ minWidth: 120 }}>
              <InputLabel>기간</InputLabel>
              <Select
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value as TimeRange)}
                label="기간"
              >
                <MenuItem value="일주일">일주일</MenuItem>
                <MenuItem value="한달">한달</MenuItem>
                <MenuItem value="3개월">3개월</MenuItem>
                <MenuItem value="전체">전체</MenuItem>
              </Select>
            </FormControl>

            <ButtonGroup size="small">
              <Button
                variant={chartType === "일별" ? "contained" : "outlined"}
                onClick={() => setChartType("일별")}
              >
                일별
              </Button>
              <Button
                variant={chartType === "시간대별" ? "contained" : "outlined"}
                onClick={() => setChartType("시간대별")}
              >
                시간대별
              </Button>
              <Button
                variant={chartType === "품질별" ? "contained" : "outlined"}
                onClick={() => setChartType("품질별")}
              >
                품질별
              </Button>
            </ButtonGroup>
          </Stack>
        </Box>
        {/* 성취 레벨 카드 */}
        <Card
          sx={{
            background: `linear-gradient(135deg, ${achievementLevel.color}20, ${achievementLevel.color}10)`,
            border: `2px solid ${achievementLevel.color}`,
          }}
        >
          <CardContent>
            <Stack direction="row" alignItems="center" spacing={3}>
              <Avatar
                sx={{
                  bgcolor: achievementLevel.color,
                  width: 80,
                  height: 80,
                  fontSize: "2rem",
                }}
              >
                {achievementLevel.icon}
              </Avatar>
              <Box flex={1}>
                <Typography variant="h5" fontWeight="bold" color={achievementLevel.color}>
                  {achievementLevel.level} 레벨
                </Typography>
                <Typography variant="body1" sx={{ mt: 1 }}>
                  {achievementLevel.description}
                </Typography>
                <Stack direction="row" spacing={2} sx={{ mt: 2 }}>
                  <Chip label={`총 ${stats.totalWashes}회`} size="small" />
                  <Chip label={`${stats.currentStreak}일 연속`} size="small" />
                  <Chip label={`완료도 ${stats.avgCompletionRate.toFixed(1)}%`} size="small" />
                </Stack>
              </Box>
            </Stack>
          </CardContent>
        </Card>
        {/* 핵심 지표 */}
        <Stack direction="row" spacing={3} sx={{ flexWrap: "wrap" }}>
          <Card sx={{ flex: 1, minWidth: 250 }}>
            <CardContent sx={{ textAlign: "center" }}>
              <Avatar sx={{ bgcolor: "#2196f3", mx: "auto", mb: 2, width: 56, height: 56 }}>
                <Typography variant="h5">🚿</Typography>
              </Avatar>
              <Typography variant="h4" color="primary" fontWeight="bold">
                {stats.totalWashes}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                총 손씻기 횟수
              </Typography>
              <Typography variant="caption" color="textSecondary">
                ({timeRange} 기준)
              </Typography>
            </CardContent>
          </Card>

          <Card sx={{ flex: 1, minWidth: 250 }}>
            <CardContent sx={{ textAlign: "center" }}>
              <Avatar sx={{ bgcolor: "#4caf50", mx: "auto", mb: 2, width: 56, height: 56 }}>
                <Typography variant="h5">⏱️</Typography>
              </Avatar>
              <Typography variant="h4" color="success.main" fontWeight="bold">
                {stats.avgDuration.toFixed(1)}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                평균 소요시간 (초)
              </Typography>
              <LinearProgress
                variant="determinate"
                value={Math.min(100, (stats.avgDuration / 30) * 100)}
                sx={{ mt: 1 }}
              />
            </CardContent>
          </Card>

          <Card sx={{ flex: 1, minWidth: 250 }}>
            <CardContent sx={{ textAlign: "center" }}>
              <Avatar sx={{ bgcolor: "#ff9800", mx: "auto", mb: 2, width: 56, height: 56 }}>
                <Typography variant="h5">🔥</Typography>
              </Avatar>
              <Typography variant="h4" color="warning.main" fontWeight="bold">
                {stats.currentStreak}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                현재 연속 기록 (일)
              </Typography>
              <Typography variant="caption" color="textSecondary">
                최고: {stats.longestStreak}일
              </Typography>
            </CardContent>
          </Card>

          <Card sx={{ flex: 1, minWidth: 250 }}>
            <CardContent sx={{ textAlign: "center" }}>
              <Avatar sx={{ bgcolor: "#9c27b0", mx: "auto", mb: 2, width: 56, height: 56 }}>
                <Typography variant="h5">📱</Typography>
              </Avatar>
              <Typography variant="h4" color="secondary.main" fontWeight="bold">
                {stats.arUsageRate.toFixed(1)}%
              </Typography>
              <Typography variant="body2" color="textSecondary">
                AR 기능 사용률
              </Typography>
              <LinearProgress
                variant="determinate"
                value={stats.arUsageRate}
                color="secondary"
                sx={{ mt: 1 }}
              />
            </CardContent>
          </Card>
        </Stack>{" "}
        {/* 차트 영역 */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              📈 {chartType} 분석 ({timeRange})
            </Typography>

            {chartType === "일별" && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  최근 30일간 일별 손씻기 패턴
                </Typography>
                <Stack spacing={1}>
                  {stats.dailyStats.slice(-10).map((day) => (
                    <Box key={day.date} sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                      <Typography variant="body2" sx={{ minWidth: 80, fontSize: "0.8rem" }}>
                        {new Date(day.date).toLocaleDateString("ko-KR", {
                          month: "short",
                          day: "numeric",
                        })}
                      </Typography>
                      <LinearProgress
                        variant="determinate"
                        value={
                          day.count > 0
                            ? Math.min(
                                100,
                                (day.count /
                                  Math.max(1, Math.max(...stats.dailyStats.map((d) => d.count)))) *
                                  100,
                              )
                            : 0
                        }
                        sx={{ flex: 1, height: 8 }}
                      />
                      <Typography variant="body2" sx={{ minWidth: 30, textAlign: "right" }}>
                        {day.count}회
                      </Typography>
                    </Box>
                  ))}
                </Stack>
              </Box>
            )}

            {chartType === "시간대별" && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  24시간 기준 시간대별 손씻기 빈도
                </Typography>
                <Grid container spacing={1}>
                  {[0, 1, 2, 3, 4, 5].map((period) => {
                    const startHour = period * 4;
                    const endHour = startHour + 3;
                    const periodCount = stats.hourlyStats
                      .slice(startHour, endHour + 1)
                      .reduce((sum, h) => sum + h.count, 0);
                    const maxCount = Math.max(...stats.hourlyStats.map((h) => h.count));

                    return (
                      <Grid item xs={2} key={period}>
                        <Paper sx={{ p: 2, textAlign: "center" }}>
                          <Typography variant="caption" color="textSecondary">
                            {startHour}:00-{endHour + 1}:00
                          </Typography>
                          <Typography variant="h6" color="primary">
                            {periodCount}
                          </Typography>
                          <LinearProgress
                            variant="determinate"
                            value={maxCount > 0 ? (periodCount / maxCount) * 100 : 0}
                            sx={{ mt: 1 }}
                          />
                        </Paper>
                      </Grid>
                    );
                  })}
                </Grid>
              </Box>
            )}

            {chartType === "품질별" && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  손씻기 품질 분포 및 분석
                </Typography>
                <Stack spacing={2}>
                  {Object.entries(stats.qualityDistribution).map(([quality, count]) => {
                    const { bg, text } = getQualityColor(quality);
                    const percentage =
                      stats.totalWashes > 0 ? (count / stats.totalWashes) * 100 : 0;

                    return (
                      <Box key={quality} sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                        <Avatar sx={{ bgcolor: bg, width: 32, height: 32 }}>
                          <Typography variant="caption" color="white">
                            {count}
                          </Typography>
                        </Avatar>
                        <Box flex={1}>
                          <Typography variant="body2" fontWeight="bold">
                            {text}
                          </Typography>
                          <LinearProgress
                            variant="determinate"
                            value={percentage}
                            sx={{ mt: 0.5, "& .MuiLinearProgress-bar": { bgcolor: bg } }}
                          />
                        </Box>
                        <Typography variant="body2" sx={{ minWidth: 60, textAlign: "right" }}>
                          {percentage.toFixed(1)}%
                        </Typography>
                      </Box>
                    );
                  })}
                </Stack>
              </Box>
            )}
          </CardContent>
        </Card>
        {/* 개선 제안 */}
        {improvementSuggestions.length > 0 && (
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                💡 AI 맞춤 개선 제안
              </Typography>
              <Stack spacing={2}>
                {improvementSuggestions.map((suggestion, index) => (
                  <Alert
                    key={index}
                    icon={<span style={{ fontSize: "1.2rem" }}>{suggestion.icon}</span>}
                    severity="info"
                    sx={{ "& .MuiAlert-icon": { color: suggestion.color } }}
                  >
                    <Typography variant="subtitle2" fontWeight="bold">
                      {suggestion.title}
                    </Typography>
                    <Typography variant="body2">{suggestion.description}</Typography>
                  </Alert>
                ))}
              </Stack>
            </CardContent>
          </Card>
        )}
        {/* 위치별 통계 */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              📍 위치별 손씻기 분석
            </Typography>
            <Stack spacing={2}>
              {Object.entries(stats.locationStats)
                .sort(([, a], [, b]) => (b as number) - (a as number))
                .map(([location, count]) => {
                  const percentage =
                    stats.totalWashes > 0 ? ((count as number) / stats.totalWashes) * 100 : 0;
                  const locationEmoji: Record<string, string> = {
                    집: "🏠",
                    회사: "🏢",
                    식당: "🍽️",
                    화장실: "🚻",
                    기타: "🌍",
                  };

                  return (
                    <Box key={location} sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                      <Avatar sx={{ bgcolor: "#2196f3", width: 40, height: 40 }}>
                        <Typography>{locationEmoji[location] || "📍"}</Typography>
                      </Avatar>
                      <Box flex={1}>
                        <Typography variant="body1" fontWeight="bold">
                          {location}
                        </Typography>
                        <LinearProgress variant="determinate" value={percentage} sx={{ mt: 0.5 }} />
                      </Box>
                      <Stack alignItems="flex-end">
                        <Typography variant="h6" color="primary">
                          {count as number}회
                        </Typography>
                        <Typography variant="caption" color="textSecondary">
                          {percentage.toFixed(1)}%
                        </Typography>
                      </Stack>
                    </Box>
                  );
                })}
            </Stack>
          </CardContent>
        </Card>
        {/* 상세 기록 테이블 */}
        <Card>
          <CardContent>
            <Box
              sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2 }}
            >
              <Typography variant="h6">📋 상세 기록 ({timeRange})</Typography>
              <Button size="small" onClick={() => setShowDetails(!showDetails)}>
                {showDetails ? "간단히 보기" : "자세히 보기"}
              </Button>
            </Box>

            {showDetails ? (
              <TableContainer component={Paper} variant="outlined">
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>날짜</TableCell>
                      <TableCell>소요시간</TableCell>
                      <TableCell>품질</TableCell>
                      <TableCell>위치</TableCell>
                      <TableCell>완료단계</TableCell>
                      <TableCell>AR사용</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {stats.filteredRecords
                      .slice(-10)
                      .reverse()
                      .map((record) => (
                        <TableRow key={record.id}>
                          <TableCell>
                            <Typography variant="body2">
                              {new Date(record.timestamp).toLocaleString("ko-KR", {
                                month: "short",
                                day: "numeric",
                                hour: "2-digit",
                                minute: "2-digit",
                              })}
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2">{record.duration || 20}초</Typography>
                          </TableCell>
                          <TableCell>
                            <Chip
                              label={getQualityColor(record.quality).text}
                              size="small"
                              sx={{
                                bgcolor: getQualityColor(record.quality).bg,
                                color: "white",
                                fontSize: "0.7rem",
                              }}
                            />
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2">{record.location || "미정"}</Typography>
                          </TableCell>
                          <TableCell>
                            <Typography variant="body2">
                              {record.completedSteps?.length || 0}/6
                            </Typography>
                          </TableCell>
                          <TableCell>
                            <Chip
                              label={record.arUsed ? "AR" : "일반"}
                              size="small"
                              color={record.arUsed ? "secondary" : "default"}
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                  </TableBody>
                </Table>
              </TableContainer>
            ) : (
              <List>
                {stats.filteredRecords
                  .slice(-5)
                  .reverse()
                  .map((record, index) => (
                    <Box key={record.id}>
                      <ListItem>
                        <ListItemAvatar>
                          <Avatar sx={{ bgcolor: getQualityColor(record.quality).bg }}>
                            <Typography variant="caption" color="white">
                              {record.duration || 20}s
                            </Typography>
                          </Avatar>
                        </ListItemAvatar>
                        <ListItemText
                          primary={
                            <Stack direction="row" spacing={1} alignItems="center">
                              <Typography variant="body2" fontWeight="bold">
                                {record.location || "미정"}
                              </Typography>
                              <Chip label={getQualityColor(record.quality).text} size="small" />
                              {record.arUsed && <Chip label="AR" size="small" color="secondary" />}
                            </Stack>
                          }
                          secondary={
                            <Typography variant="caption" color="textSecondary">
                              {record.timestamp} • {record.completedSteps?.length || 0}/6 단계 완료
                            </Typography>
                          }
                        />
                      </ListItem>
                      {index < 4 && <Divider />}
                    </Box>
                  ))}
              </List>
            )}
          </CardContent>
        </Card>
        {기록추가Data.length === 0 && (
          <Alert severity="info" sx={{ textAlign: "center" }}>
            <Typography variant="h6" gutterBottom>
              📊 아직 분석할 데이터가 없습니다
            </Typography>
            <Typography variant="body2">
              AR 손씻기 기록을 시작하면 상세한 통계와 인사이트를 제공해드릴게요!
            </Typography>
          </Alert>
        )}
      </Stack>
    </Box>
  );
};
